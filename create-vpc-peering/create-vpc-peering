#!/bin/bash

# Creates a vpc peering connection between two VPCs

# Author: Michael Ludvig <michael.ludvig@enterpriseit.co.nz>

set -e

export SCRIPTS_DIR=$(dirname $0)
test -z "${SCRIPTS_DIR}" && SCRIPTS_DIR=$(dirname $(which $0))
export JQ_DIR=${SCRIPTS_DIR}/../jq

if [ $# -ne 4 ]; then
    echo "Usage:     create-vpcpeer <source profile> <source vpc>/<route-table> <target profile> <target vpc>/<route-table>"
    echo "Example:   create-vpcpeer Shared vpc-asdc1234/rtb-asdfghjk Sandpit1 Sandpit-VPC/rtb-zxcvbnmp"
    echo "List VPCs: create-vpcpeer Shared --list Sandpit1 --list"
    echo
    echo "VPCs can be specified either by the name tag or by vpc-xxxxxxxx id."
    exit 1
fi

function fatal() {
	echo $1 >&2
	exit 1
}

function get_routetable() {
	_AWS=$1
	#_PROFILE=$2
	_VPC=$2

	_RTLIST=$(${_AWS} ec2 describe-route-tables --filter Name=vpc-id,Values=${_VPC} | jq -f ${JQ_DIR}/unfold-tags.jq)
	case $(jq '. | length' <<< ${_RTLIST}) in
		0)
			fatal "No route table found for ${_VPC}"
			;;
		1)
			jq -r '.[0].RouteTableId' <<< ${_RTLIST}
			;;
		*)
			echo "Multiple routing tables found for ${_VPC}" >&2
			echo "Choose one and pass it to the script as ${_VPC}/rtb-SoMeThInG" >&2
			jq -r -f ${JQ_DIR}/describe-rt.list.jq <<< ${_RTLIST} >&2
			exit 1
			;;
	esac
}

SOURCE_PROFILE=$1
SOURCE_VPC_RT=$2
TARGET_PROFILE=$3
TARGET_VPC_RT=$4

unset AWS_ACCESS_KEY_ID
unset AWS_SECRET_ACCESS_KEY
unset AWS_PROFILE_NUMBER

SOURCE_AWS="aws --profile=${SOURCE_PROFILE}"
TARGET_AWS="aws --profile=${TARGET_PROFILE}"

SOURCE_JSON=$(${SOURCE_AWS} ec2 describe-vpcs | jq -f ${JQ_DIR}/unfold-tags.jq)
TARGET_JSON=$(${TARGET_AWS} ec2 describe-vpcs | jq -f ${JQ_DIR}/unfold-tags.jq)
if [ "${SOURCE_VPC_RT}" == "--list" ]; then
	echo "*** VPCs in ${SOURCE_PROFILE} ..."
	jq -r -f ${JQ_DIR}/describe-vpcs.list.jq <<< ${SOURCE_JSON}
	echo
	echo "*** RouteTables ..."
	${SOURCE_AWS} ec2 describe-route-tables | jq -f ${JQ_DIR}/unfold-tags.jq | jq -r -f ${JQ_DIR}/describe-rt.list.jq
	echo
fi

if [ "${TARGET_VPC_RT}" == "--list" ]; then
	echo "*** VPCs in ${TARGET_PROFILE} ..."
	jq -r -f ${JQ_DIR}/describe-vpcs.list.jq <<< ${TARGET_JSON}
	echo
	echo "*** RouteTables ..."
	${TARGET_AWS} ec2 describe-route-tables | jq -f ${JQ_DIR}/unfold-tags.jq | jq -r -f ${JQ_DIR}/describe-rt.list.jq
	echo
fi

test "${SOURCE_VPC_RT}" == "--list" -o "${TARGET_VPC_RT}" == "--list" && exit 1

read SOURCE_VPC SOURCE_RT <<< ${SOURCE_VPC_RT/\// }
read TARGET_VPC TARGET_RT <<< ${TARGET_VPC_RT/\// }

if [ -z "${SOURCE_VPC}" -o -z "${TARGET_VPC}" ]; then
	echo "Source or Target VPC ID is missing."
	echo "Please use vpc-abcd[/rt-1234] form for both source and target accounts."
	exit 1
fi

test -z "${SOURCE_RT}" && SOURCE_RT=$(get_routetable "${SOURCE_AWS}" ${SOURCE_VPC})
test -z "${TARGET_RT}" && TARGET_RT=$(get_routetable "${TARGET_AWS}" ${TARGET_VPC})

echo "Working on it, please be patient..."

grep -q "^vpc-" <<< "${SOURCE_VPC}" || SOURCE_VPC=$(jq -r --arg stackname "${SOURCE_VPC}" -f ${JQ_DIR}/describe-vpcs.tag2vpc.jq <<< ${SOURCE_JSON})
grep -q "^vpc-" <<< "${TARGET_VPC}" || TARGET_VPC=$(jq -r --arg stackname "${TARGET_VPC}" -f ${JQ_DIR}/describe-vpcs.tag2vpc.jq <<< ${TARGET_JSON})

SOURCE_ACCTID=$(${SOURCE_AWS} iam get-user | jq -r -f ${JQ_DIR}/get-user.acctid.jq)
TARGET_ACCTID=$(${TARGET_AWS} iam get-user | jq -r -f ${JQ_DIR}/get-user.acctid.jq)

echo SOURCE: $SOURCE_ACCTID $SOURCE_VPC/$SOURCE_RT
echo TARGET: $TARGET_ACCTID $TARGET_VPC/$TARGET_RT

echo "Creating VPC Peering request from $SOURCE_VPC to $TARGET_VPC"
VPC_REQ_JSON=$(${SOURCE_AWS} ec2 create-vpc-peering-connection --vpc-id $SOURCE_VPC --peer-vpc-id $TARGET_VPC --peer-owner-id $TARGET_ACCTID)
if [ $? -ne 0 ]; then
    echo "Error creating peering connection..."
    exit 1
fi

PCX=$(jq -r .VpcPeeringConnection.VpcPeeringConnectionId <<< ${VPC_REQ_JSON})

echo "Accepting VPC Peering request $PCX in ${TARGET_PROFILE}"
ACCEPTED_JSON=$(${TARGET_AWS} ec2 accept-vpc-peering-connection --vpc-peering-connection-id ${PCX})
if [ $? -ne 0 ]; then
    echo "Error accepting peering connection..."
    exit 1
fi

echo "Accepted VPC Peering request $PCX from $SOURCE_VPC/$SOURCE_PROFILE to $TARGET_VPC/$TARGET_PROFILE"

SOURCE_CIDR=$(jq -r .VpcPeeringConnection.RequesterVpcInfo.CidrBlock <<< ${ACCEPTED_JSON})
TARGET_CIDR=$(jq -r .VpcPeeringConnection.AccepterVpcInfo.CidrBlock <<< ${ACCEPTED_JSON})

echo "Creating route for ${TARGET_CIDR} in ${SOURCE_PROFILE} / ${SOURCE_RT} ..."
${SOURCE_AWS} ec2 create-route --route-table-id ${SOURCE_RT} --destination-cidr-block ${TARGET_CIDR} --vpc-peering-connection-id ${PCX} > /dev/null

echo "Creating route for ${SOURCE_CIDR} in ${TARGET_PROFILE} / ${TARGET_RT} ..."
${TARGET_AWS} ec2 create-route --route-table-id ${TARGET_RT} --destination-cidr-block ${SOURCE_CIDR} --vpc-peering-connection-id ${PCX} > /dev/null

echo "All done!"
