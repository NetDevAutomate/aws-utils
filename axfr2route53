#!/usr/bin/env python3

# Author: Michael Ludvig - https://aws.nz/aws-utils/axfr2route53
# License: BSD

# Convert DNS zone from Bind's "dig axfr" format to AWS Route53 JSON input
# Usage:
#  1) dig axfr example.com. @ns.example.com. | axfr2route53 > example-com.json
#  2) aws route53 change-resource-record-sets --hosted-zone-id ZABCDEF123456 --change-batch file://example-com.json
#  3) Update list of nameservers to AWS ones through example.com's registrar

import re
import sys
import json

if len(sys.argv) > 1:
    inp = open(sys.argv[1], 'r')
else:
    inp = sys.stdin

changes = []
zone_name = ""

while True:
    line = inp.readline()
    if not line:
        break
    line = line.strip()
    m = re.match('^(\S+)\s+(\d+)\s+(\w+)\s+(\w+)\s+(.*)$', line)
    if not m:
        continue
    r = {}
    r['name'] = m.group(1)
    r['ttl'] = int(m.group(2))
    r['class'] = m.group(3)
    r['type'] = m.group(4)
    r['data'] = m.group(5)
    if r['class'] != "IN":
        sys.stderr.write("Unknown class, only supporting IN: %s" % line)
        continue
    if r['type'] == "SOA":
        zone_name = r['name']
        continue
    if r['type'] == "NS" and r['name'] == zone_name:
        # Ignore zone NS records
        continue
    changes.append({
        "Action" : "CREATE",
        "ResourceRecordSet" : {
            "Name" : r['name'],
            "Type" : r['type'],
            "TTL"  : r['ttl'],
            "ResourceRecords" : [{
                "Value" : r['data']
            }]
        }
    })

if changes:
    change_batch = {
        "Changes": changes
    }
    print(json.dumps(change_batch, indent=2))
