#!/usr/bin/env python3

# By Michael Ludvig <mludvig@logix.net.nz> (c) 2017
# Webpage: https://aws.nz/aws-utils/get-credentials
# License: GPLv3

# Simple script that retrieves AWS credentials (access key,
# secret key and possibly security token) from any avaiable
# source:
# - Environment variables
# - ~/.aws/config or ~/.aws/credentials (including cross-account)
# - EC2 IAM Role
# - ...
# See http://boto3.readthedocs.io/en/latest/guide/configuration.html

import os
import sys
import argparse
import boto3

# Boto3 1.4.x or newer required
(ver_major, ver_minor, ver_patch) = boto3.__version__.split('.')
if int(ver_major)*100 + int(ver_minor) < 104:
    sys.exit("ERROR: Boto3 1.4.x or newer is required")

def update_env(env, var_name, var_value):
    if var_name and var_value:
        env[var_name] = var_value

parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter)

group_general = parser.add_argument_group('General Options')
group_general.add_argument('-p', '--profile', dest='profile', type=str, help='Configuration profile from ~/.aws/{credentials,config}')
group_general.add_argument('-r', '--region', dest='region', type=str, help='Set / override AWS region.')

group_outputs = parser.add_argument_group('Output Options')
group_outputs.add_argument('--access-key-var', dest='access_key_var', metavar='AWS_ACCESS_KEY_ID', default='AWS_ACCESS_KEY_ID', help='Access Key variable name. Default is $AWS_ACCESS_KEY_ID')
group_outputs.add_argument('--secret-key-var', dest='secret_key_var', metavar='AWS_SECRET_ACCESS_KEY', default='AWS_SECRET_ACCESS_KEY', help='Secret Key variable name. Default is $AWS_SECRET_ACCESS_KEY')
group_outputs.add_argument('--session-token-var', dest='session_token_var', metavar='AWS_SESSION_TOKEN', default='AWS_SESSION_TOKEN', help='Session Token variable name. Default is $AWS_SESSION_TOKEN')
group_outputs.add_argument('--region-var', dest='region_var', metavar='AWS_DEFAULT_REGION', default='', nargs='?', const='AWS_DEFAULT_REGION', help='Default Region variable name, if available. Usually $AWS_DEFAULT_REGION. Not exported by default.')
group_outputs.add_argument('--profile-var', dest='profile_var', metavar='AWS_PROFILE', default='', nargs='?', const='AWS_PROFILE', help='Default Profile variable name, if available. Usually $AWS_PROFILE. Not exported by default.')
group_outputs.add_argument('--method-var', dest='method_var', metavar='GET_CREDENTIALS_METHOD_USED', default='', nargs='?', const='GET_CREDENTIALS_METHOD_USED', help='Method used to obtain the credentials, e.g. "iam-role", "assume-role", "env" or "shared-credentials-file". Not exported by default.')

parser.usage = "{} [options] [-- COMMAND [ARG ...]]".format(parser.prog)
parser.description='Retrieve AWS credentials from any available source'
parser.epilog='''
Examples:

1) Print AWS credentials from EC2 IAM Role

    ~ $ {prog} --method-var
    export AWS_ACCESS_KEY_ID=ASIAZXCVBNMASDFGHJKL
    export AWS_SECRET_ACCESS_KEY=lLvl4lTFLRERTuHi5Mrf4uuJ++8T7MlLvl4lT
    export AWS_SESSION_TOKEN=OnlOwq5fxy[...]2qJ1ZgqDDxp68romfqJh1x3yVy
    export GET_CREDENTIALS_METHOD_USED=iam-role

2) Run a program with the AWS credentials environment variables set

    ~ $ {prog} --profile cross-account -- aws sts get-caller-identity
    {{
        "Account": "123456789012",
        "UserId": "AROAQWERTYUIOP1234556:AWS-CLI-session",
        "Arn": "arn:aws:sts::123456789012:assumed-role/CrossRole/AWS-CLI-session"
    }}

This is equivalent to 'aws --profile cross-account sts get-caller-identity'
and is intended for programs that do not support obtaining credentials
from ~/.aws/credentials or from EC2 instance IAM Role.


Visit https://aws.nz/aws-utils/get-credentials for more info
and more usage examples.
'''.format(prog=parser.prog)
args, cmd = parser.parse_known_args()

# Create command if we've got some "unknown_args" left
if cmd and cmd[0] == '--':
    cmd.pop(0)

env = {}
if args.profile:
    update_env(env, args.profile_var, args.profile)

session = boto3.session.Session(profile_name=args.profile, region_name=args.region)
if session.region_name:
    update_env(env, args.region_var, session.region_name)

credentials = session.get_credentials()
if not credentials:
    sys.exit("ERROR: Unable to locate credentials from any source.")

update_env(env, args.access_key_var, credentials.access_key)
update_env(env, args.secret_key_var, credentials.secret_key)
update_env(env, args.session_token_var, credentials.token)

update_env(env, args.method_var, credentials.method)

if cmd:
    import subprocess
    os.environ.update(env)
    cmd_run = subprocess.run(' '.join(cmd), shell=True)
    sys.exit(cmd_run.returncode)

for var in env.keys():
    print('export {}="{}"'.format(var, env[var]))
