#!/bin/bash

# By Michael Ludvig <mludvig@logix.net.nz> (c) 2015
# License: GPLv3

# Obtain temporary cross-account or cross-role credentials from STS
# Enables scripts running on an EC2 instance with instance-role access
# to other roles or other AWS accounts.
# Cross-role access must be configured first.

set -e

export SCRIPTS_DIR=$(dirname $0)
test -z "${SCRIPTS_DIR}" && SCRIPTS_DIR=$(dirname $(which $0))
export JQ_DIR=${SCRIPTS_DIR}/../jq

function show_help() {
	cat << __EOF__
Usage: $0 -r ROLENAME|ARN  [-c ROLES.CSV]  [-p PROFILE] [-l] [-h] [--] [COMMAND [ARGS]]

Assume Credentials from another IAM Role and either print them
in a form suitable for eval(1) or run 'command' with these
Credentials in the environment.

   COMMAND      Run the COMMAND with ARGS using the assumed IAM Role's creds.
                Prepend '--' if the command has arguments starting with '-'.

   -c ROLES.CSV Path to the config file with IAM Role ARNs.
                Optional, not needed if using '-r ARN', only needed
		when using '-r ROLENAME'.

   -p PROFILE   AWS-CLI Profile name as defined in ~/.aws/config.
                Optional, will use default or instance meta-data if
                not specified.

   -g REGION    AWS Region to query. Optional if PROFILE has region set.

   -r ROLENAME or -r ARN
                Name of IAM Role from ROLES.CSV or IAM Role ARN to assume.

   -l           List role names from ROLES.CSV

   -h           Display help.

__EOF__
	exit 1
}

function fatal() {
	echo $1 >&2
	exit 1
}

AWS=$(which aws 2>/dev/null)
test -z "${AWS}" && fatal "The 'aws' utility not found. Please install it or add its location to \$PATH"

while getopts "c:g:hlp:r:" OPT; do
	case "${OPT}" in
	c)
		ROLES_CSV="${OPTARG}"
		;;
	g)
		AWS="${AWS} --region=${OPTARG}"
		;;
	p)
		AWS="${AWS} --profile=${OPTARG}"
		;;
	r)
		ROLE_NAME="${OPTARG}"
		;;
	l)
		LIST=1
		;;
	h)
		show_help
		;;
	esac
done
shift $(($OPTIND - 1))

if [ "${ROLE_NAME:0:12}" = "arn:aws:iam:" ]; then
	# We've got ROLE_ARN - no need to parse the config file.
	ROLE_ARN=${ROLE_NAME}
	ROLE_NAME=$(cut -d/ -f2 <<< ${ROLE_ARN})
else
	test -z "${ROLES_CSV}" && fatal "Need Role ARN (-r arn:aws:iam:...) or Config file (-c /path/to/roles.csv). See -h for help."

	# List available roles
	if [ -n "${LIST}" ]; then
		awk -F\| 'NR>1 && /^[^$]/{print $1 " - " $2}' ${ROLES_CSV}
		exit
	fi

	# Resolve ROLE_NAME to ROLE_ARN
	eval $(awk -F\| -v role=${ROLE_NAME} -v retval=1 -v IGNORECASE=1 'NR==1{split($0, varnames);} NR>1 && $1 == role{ for (nf=1; nf<=NF; nf++) { print "export VAR_" varnames[nf] "=" $nf } retval=0} END{exit retval}' ${ROLES_CSV})
	if [ -z "${VAR_ARN}" ]; then
		echo "Role '${ROLE_NAME}' not found in ${ROLES_CSV}. Try: $0 -c ${ROLES_CSV} -l" >&2
		exit 1
	fi
	ROLE_ARN=${VAR_ARN}
fi

unset AWS_ACCESS_KEY_ID
unset AWS_SECRET_ACCESS_KEY
unset AWS_SESSION_TOKEN
unset AWS_SECURITY_TOKEN

eval $(${AWS} sts assume-role --role-arn ${ROLE_ARN} --role-session-name ${ROLE_NAME}_$(date +%s) --duration-seconds 900 | jq -r '
	@text "export AWS_ACCESS_KEY_ID=\"\(.Credentials.AccessKeyId)\"",
	@text "export AWS_SECRET_ACCESS_KEY=\"\(.Credentials.SecretAccessKey)\"",
	@text "export AWS_SESSION_TOKEN=\"\(.Credentials.SessionToken)\"",
	@text "export AWS_SECURITY_TOKEN=\"\(.Credentials.SessionToken)\""
')

if [ $# -gt 0 ]; then
	exec $*
else
	echo "export AWS_ACCESS_KEY_ID=\"${AWS_ACCESS_KEY_ID}\""
	echo "export AWS_SECRET_ACCESS_KEY=\"${AWS_SECRET_ACCESS_KEY}\""
	echo "export AWS_SESSION_TOKEN=\"${AWS_SESSION_TOKEN}\""
	echo "export AWS_SECURITY_TOKEN=\"${AWS_SECURITY_TOKEN}\""
fi
